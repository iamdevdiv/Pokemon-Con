#:kivy 2.0.0

#:import Gradient kivy_gradient.Gradient
#:import Animation kivy.animation.Animation
#:import get_color_from_hex kivy.utils.get_color_from_hex
#:import login_google kivyauth.google_auth.login_google

<RotatableImage>:  # https://stackoverflow.com/a/17699932/14113019
    canvas.before:
        PushMatrix
        Rotate:
            angle: root.angle
            axis: 0, 0, 1
            origin: root.center
    canvas.after:
        PopMatrix


<FancyButton>:
    rounded_btn_img: rounded_btn_img

    background_color: 0, 0, 0, 0
    background_normal: ""

    on_press: if app.screen_manager.get_screen("Login Screen").intro_completed: Animation(scale_value_x=.9, scale_value_y=.95, d=.03).start(self)
    on_touch_up: if app.screen_manager.get_screen("Login Screen").intro_completed: Animation(scale_value_x=1, scale_value_y=1, d=.03).start(self)

    canvas.before:
        PushMatrix
        Scale:
            x: self.scale_value_x
            y: self.scale_value_y
            origin: self.center
    canvas.after:
        PopMatrix

    RotatableImage:
        id: rounded_btn_img
        source: root.img_source
        size: root.height, root.height - dp(root.img_height_subtractor)
        center: self.parent.x + (self.width / root.img_width_divisor), self.parent.center_y
        keep_ratio: False
        allow_stretch: True

    Label:
        text: root.label_text
        center: self.parent.center_x + (rounded_btn_img.width / 2) - dp(root.label_center_x_subtractor), self.parent.center_y + dp(root.label_center_y_addend)
        color: root.label_color
        font_size: self.parent.height / root.label_font_size_divisor
        font_name: root.label_font_name


<FancySpinner>:
    background_color: 0, 0, 0, 0
    background_normal: ""
    disabled_color: 0, 0, 0, 0

    on_press: Animation(scale_value_x=.9, scale_value_y=.95, d=.03).start(self)
    on_touch_up: Animation(scale_value_x=1, scale_value_y=1, d=.03).start(self)

    canvas.before:
        PushMatrix
        Scale:
            x: self.scale_value_x
            y: self.scale_value_y
            origin: self.center
    canvas.after:
        PopMatrix

    RotatableImage:
        id: dropdown_img
        source: "Images/dropdown.png"
        size: root.height * 1.25, root.height * 1.25
        center: self.parent.x + (self.width / 2.5), self.parent.center_y
        keep_ratio: False
        allow_stretch: True
        angle: 180 if self.parent.is_open else 0

    Label:
        text: root.label_text
        center: self.parent.center_x + (dropdown_img.width / 2) - dp(root.label_center_x_subtractor), self.parent.center_y + dp(1)
        color: root.label_color
        font_size: self.parent.height * 0.6
        font_name: "Fonts/neuropol_x.ttf"


<FancySpinnerOption@SpinnerOption>:
    background_color: 0, 0, 0, 0
    background_normal: ""
    color: 0, 0, 0
    font_name: "Fonts/neuropol_x.ttf"
    font_size: self.height * 0.6

    canvas.before:
        RoundedRectangle:
            size: self.width * 0.8, self.height * 0.9
            pos: self.center_x / 5, self.y  # it works, why?
            radius: [self.height / 2]
            texture: Gradient.vertical(get_color_from_hex("77E7FC")) if self.state == "down" else Gradient.vertical(get_color_from_hex("2CDDFF"))


<LoadingScreen>:
    loading_bar: loading_bar

    Widget:
        opacity: .6
        canvas.before:
            Rectangle:
                size: self.size
                pos: self.pos
                source: "Images/loading.jpg"

        Label:
            text: "Loading..."
            size: self.texture_size
            center: root.center_x, self.height
            font_name: "Fonts/neuropol_x.ttf"
            font_size: sp(20)

    Widget:
        id: loading_bar
        size_hint_x: None
        width: 0
        canvas:
            Color:
                rgb: 1, 1, 1
            Rectangle:
                pos: 0, 0
                size: loading_bar.width, dp(2)
                texture: Gradient.vertical(get_color_from_hex("00FFFF"), get_color_from_hex("099FFF"), get_color_from_hex("0062FF"), get_color_from_hex("0033FF"))


<LoginScreen>:
    skip_intro_msg: skip_intro_msg
    bg_image: bg_image

    developer_text: developer_text
    divyanshu_text: divyanshu_text
    dev_text: dev_text
    div_text: div_text
    dev_div_text: dev_div_text
    presents_text: presents_text

    python_powered: python_powered
    and_text: and_text
    kivy_logo: kivy_logo
    kivy_text: kivy_text

    pokemon_images: pokemon_images
    the_biggest: the_biggest
    aerodactyl: aerodactyl
    weavile: weavile
    pikachu: pikachu
    blastoise: blastoise

    game_title: game_title
    p_text: p_text
    o_text: o_text
    k_text: k_text
    e_text: e_text
    m_text: m_text
    o_2_text: o_2_text
    n_text: n_text
    c_text: c_text
    o_3_text: o_3_text
    n_2_text: n_2_text

    top_buttons: top_buttons
    exit_btn: exit_btn
    options_btn: options_btn
    help_btn: help_btn

    exit_content: exit_content
    options_content: options_content
    music_slider: music_slider
    sfx_slider: sfx_slider
    email_addr: email_addr

    bottom_buttons: bottom_buttons
    login_btn: login_btn
    pokeball: login_btn.rounded_btn_img
    credits_btn: credits_btn
    terms_btn: terms_btn
    pipe_char: pipe_char
    policy_btn: policy_btn

    on_touch_up: if not root.intro_completed: root.skip_intro()

    Widget:
        Label:
            id: skip_intro_msg
            text: "Tap anywhere to skip intro"
            size: self.texture_size
            center: root.center_x, self.height * 2
            font_name: "Fonts/neuropol_x.ttf"
            font_size: sp(12)
            opacity: 0

    Widget:
        id: bg_image
        opacity: 0
        canvas.before:
            Rectangle:
                size: self.size
                pos: self.pos
                source: root.bg_image_source

    Widget:
        id: presented_by

        Label:
            id: developer_text
            text: "Developer"
            center: root.center_x - (self.width / 1.9), root.center_y
            font_name: "Fonts/av_qest.ttf"
            font_size: sp(35)
            size: self.texture_size
            opacity: 0

        Label:
            id: divyanshu_text
            text: "Divyanshu"
            center: root.center_x + (self.width / 1.9), root.center_y
            font_name: "Fonts/av_qest.ttf"
            font_size: sp(35)
            size: self.texture_size
            opacity: 0

        Label:
            id: dev_text
            text: "Dev"
            pos: developer_text.x, developer_text.y
            font_name: "Fonts/av_qest.ttf"
            font_size: sp(35)
            size: self.texture_size
            color: 1, 0, 0
            opacity: 0

        Label:
            id: div_text
            text: "Div"
            pos: divyanshu_text.x, divyanshu_text.y
            font_name: "Fonts/av_qest.ttf"
            font_size: sp(35)
            size: self.texture_size
            color: 1, 0, 0
            opacity: 0

        Label:
            id: dev_div_text
            text: "DevDiv"
            size: self.texture_size
            center: root.center
            font_name: "Fonts/av_qest.ttf"
            font_size: dp(50)
            color: 1, 0, 0
            opacity: 0

        Label:
            id: presents_text
            text: "presents"
            size: self.texture_size
            center: root.center_x, root.center_y - dp(60)
            font_name: "Fonts/alex_brush.ttf"
            font_size: sp(35)
            color: 0.8, 0.8, 0.8
            opacity: 0


    FloatLayout:
        id: powered_by

        Image:
            id: python_powered
            source: "Images/python_powered.png"
            size_hint: None, None
            size: dp(self.texture_size[0]), dp(self.texture_size[1])
            pos_hint: {"center_x": .2, "center_y": .5}
            allow_stretch: True
            opacity: 0

        Label:
            id: and_text
            text: "and"
            pos_hint: {"center_y": .5}
            font_name: "Fonts/alex_brush.ttf"
            font_size: sp(40)
            color: 1, 1, 1, .7
            opacity: 0

        Image:
            id: kivy_logo
            source: "Images/kivy_logo.png"
            size_hint: None, None
            size: dp(self.texture_size[0]), dp(self.texture_size[1])
            pos_hint: {"center_x": .7, "center_y": .5}
            allow_stretch: True
            opacity: 0

        Image:
            id: kivy_text
            source: "Images/kivy_text.png"
            size_hint: None, None
            size: dp(self.texture_size[0]), dp(self.texture_size[1])
            pos: kivy_logo.x + (kivy_logo.texture_size[0] * 1.4), kivy_logo.y
            allow_stretch: True
            opacity: 0


    FloatLayout:
        id: pokemon_images

        Image:
            id: the_biggest
            source: "Images/charmander.png"
            pos_hint: {"center_x": .3, "center_y": .6}
            size_hint: 1, .6
            allow_stretch: True
            opacity: 0

        Image:
            id: weavile
            source: "Images/weavile.png"
            pos_hint: {"center_x": .1, "center_y": .3}
            size_hint: 1, .3
            allow_stretch: True
            opacity: 0

        Image:
            id: pikachu
            source: "Images/pikachu.png"
            pos_hint: {"center_x": .3, "center_y": .2}
            size_hint: 1, .3
            allow_stretch: True
            opacity: 0

        Image:
            id: blastoise
            source: "Images/blastoise.png"
            pos_hint: {"center_x": .5, "center_y": .3}
            size_hint: 1, .3
            allow_stretch: True
            opacity: 0

        Image:
            id: aerodactyl
            source: "Images/aerodactyl.png"
            pos_hint: {"center_x": .1, "center_y": .7}
            size_hint: 1, .3
            allow_stretch: True
            opacity: 0

    Widget:
        id: game_title

        Label:
            id: n_text
            text: "n"
            size: self.texture_size
            pos: root.width - p_text.width, root.top - (self.height * 1.3)
            font_name: "Fonts/soul_calibur.ttf"
            font_size: root.height / 5
            color: 1, 1, 1
            opacity: 0

        Label:
            id: o_2_text
            text: "o"
            size: self.texture_size
            pos: n_text.x - self.width, root.top - (self.height * 1.3)
            font_name: "Fonts/soul_calibur.ttf"
            font_size: root.height / 5
            color: 1, 1, 1
            opacity: 0

        Label:
            id: m_text
            text: "m"
            size: self.texture_size
            pos: o_2_text.x - self.width, root.top - (self.height * 1.3)
            font_name: "Fonts/soul_calibur.ttf"
            font_size: root.height / 5
            color: 1, 1, 1
            opacity: 0

        Label:
            id: e_text
            text: "é"
            size: self.texture_size
            pos: m_text.x - self.width, root.top - (self.height * 1.3)
            font_name: "Fonts/soul_calibur.ttf"
            font_size: root.height / 5
            color: 1, 1, 1
            opacity: 0

        Label:
            id: k_text
            text: "k"
            size: self.texture_size
            pos: e_text.x - self.width, root.top - (self.height * 1.3)
            font_name: "Fonts/soul_calibur.ttf"
            font_size: root.height / 5
            color: 1, 1, 1
            opacity: 0

        Label:
            id: o_text
            text: "o"
            size: self.texture_size
            pos: k_text.x - self.width, root.top - (self.height * 1.3)
            font_name: "Fonts/soul_calibur.ttf"
            font_size: root.height / 5
            color: 1, 1, 1
            opacity: 0

        Label:
            id: p_text
            text: "P"
            size: self.texture_size
            pos: o_text.x - (self.width * .9), root.top - (self.height * 1.3)
            font_name: "Fonts/soul_calibur.ttf"
            font_size: root.height / 5
            color: 1, 1, 1
            opacity: 0

        Label:
            id: c_text
            text: "C"
            size: self.texture_size
            pos: o_text.x - (self.width / 2), root.top - (self.height * 2.2)
            font_name: "Fonts/soul_calibur.ttf"
            font_size: root.height / 6
            color: 1, 1, 1
            opacity: 0

        Label:
            id: o_3_text
            text: "o"
            size: self.texture_size
            pos: c_text.x + (self.width * 3), root.top - (self.height * 2.1)
            font_name: "Fonts/soul_calibur.ttf"
            font_size: root.height / 6
            color: 1, 1, 1
            opacity: 0

        Label:
            id: n_2_text
            text: "N"
            size: self.texture_size
            pos: o_3_text.x + dp(5), root.top - (self.height * 2.2)
            font_name: "Fonts/soul_calibur.ttf"
            font_size: root.height / 6
            color: 1, 1, 1
            opacity: 0

    Widget:
        id: top_buttons

        FancyButton:
            id: exit_btn
            size: root.width / 8, root.height / 18
            pos: dp(15), root.top - self.height - dp(15)
            img_source: "Images/exit.png"
            label_text: "Exit"
            opacity: 0
            on_release: if root.intro_completed: root.toggle_top_button(self)

            canvas.before:
                RoundedRectangle:
                    id: rounded
                    size: self.size
                    pos: self.pos
                    radius: [dp(15), 0, 0, dp(15)]
                    texture: Gradient.vertical(get_color_from_hex("F1959B"), get_color_from_hex("EA4C46"))

        FancyButton:
            id: options_btn
            size: root.width / 6, root.height / 18
            pos: exit_btn.x + exit_btn.width + dp(2), root.top - self.height - dp(15)
            img_source: "Images/options.png"
            label_text: "Options"
            label_color: 0, 0, 0
            opacity: 0
            on_release: if root.intro_completed: root.toggle_top_button(self)

            canvas.before:
                RoundedRectangle:
                    size: self.size
                    pos: self.pos
                    radius: [0]
                    texture: Gradient.vertical(get_color_from_hex("ABE098"), get_color_from_hex("57C84D"))

        FancyButton:
            id: help_btn
            size: root.width / 8, root.height / 18
            pos: options_btn.x + options_btn.width + dp(2), root.top - self.height - dp(15)
            img_source: "Images/help.png"
            img_height_subtractor: dp(0)
            label_text: "Help"
            opacity: 0
            on_release: if root.intro_completed: root.toggle_top_button(self)

            canvas.before:
                RoundedRectangle:
                    size: self.size
                    pos: self.pos
                    radius: [0, dp(15), dp(15), 0]
                    texture: Gradient.vertical(get_color_from_hex("A3A3FF"), get_color_from_hex("4949FF"))

    Widget:
        id: bottom_buttons

        FancyButton:
            id: login_btn
            size: (p_text.width / 2) + c_text.width + n_2_text.width, root.height / 10
            center: o_3_text.center_x + (self.width / 15), root.center_y - self.height
            img_source: "Images/google.png"
            img_width_divisor: 2
            img_height_subtractor: 0
            label_text: "Login"
            label_color: 0, 0, 0, .6
            label_center_x_subtractor: 10
            opacity: 0
            on_release: if root.intro_completed and self.label_text == "Login": login_google()

            canvas.before:
                RoundedRectangle:
                    size: self.size
                    pos: self.pos
                    radius: [self.height / 2]
                    texture: Gradient.horizontal(get_color_from_hex("FFFFFF")) if self.label_text == "Login" else Gradient.horizontal(get_color_from_hex("5FB9D5"), get_color_from_hex("7AC6DC"), get_color_from_hex("8ACDE0"), get_color_from_hex("A2D9E7"), get_color_from_hex("B3E2EB"))

        FancyButton:
            id: credits_btn
            size: (p_text.width / 2) + c_text.width + n_2_text.width, root.height / 10
            center: o_3_text.center_x + (self.width / 15), login_btn.center_y - self.height - dp(20)
            img_source: "Images/heart.png"
            img_width_divisor: 2
            img_height_subtractor: 0
            label_text: "Credits"
            label_color: 0, 0, 0, .6
            label_center_x_subtractor: 10
            opacity: 0

            canvas.before:
                RoundedRectangle:
                    size: self.size
                    pos: self.pos
                    radius: [self.height / 2]
                    texture: Gradient.horizontal(get_color_from_hex("EDA6A6"), get_color_from_hex("F8CACA"))

        Button:
            id: terms_btn
            text: "Terms of Use"
            size: login_btn.width / 2.5, login_btn.height / 2
            center: credits_btn.center_x - (self.width / 1.6), credits_btn.center_y - credits_btn.height - (self.height / 2)
            font_name: "Fonts/neuropol_x.ttf"
            font_size: self.height / 2
            color: .8, .8, .8
            background_normal: ""
            background_down: ""
            background_color: 0, 0, 0, 0
            opacity: 0
            on_press: if root.intro_completed: self.opacity = .8
            on_touch_up: if root.intro_completed: self.opacity = 1

        Label:
            id: pipe_char
            text: "|"
            size: self.texture_size
            center: login_btn.center_x, terms_btn.center_y
            font_name: "Fonts/neuropol_x.ttf"
            font_size: terms_btn.height / 1.5
            color: .8, .8, .8
            opacity: 0

        Button:
            id: policy_btn
            text: "Privacy Policy"
            size: login_btn.width / 2.5, login_btn.height / 2
            center: credits_btn.center_x + (self.width / 1.6), terms_btn.center_y
            font_name: "Fonts/neuropol_x.ttf"
            font_size: self.height / 2
            color: .8, .8, .8
            background_normal: ""
            background_down: ""
            background_color: 0, 0, 0, 0
            opacity: 0
            on_press: if root.intro_completed: self.opacity = .8
            on_touch_up: if root.intro_completed: self.opacity = 1

    FloatLayout:
        id: exit_content
        opacity: 0

        Label:
            id: exit_confirm_msg
            text: "Are you sure you want to exit the game?"
            size: self.texture_size
            center: options_btn.center_x, the_biggest.center_y if exit_btn.opacity == 1 else root.top + exit_content.height
            color: 170/255, 219/255, 242/255
            font_name: "Fonts/neuropol_x.ttf"
            font_size: options_btn.height / 1.5
            text_size: exit_btn.width + options_btn.width + help_btn.width, None
            halign: "center"

        Widget:
            FancyButton:
                size: exit_btn.width * 0.9, exit_btn.height * 1.1
                center: exit_confirm_msg.center_x - (self.width * 0.8), exit_confirm_msg.center_y - (self.height * 2.5) if exit_btn.opacity == 1 else root.top + exit_content.height
                img_source: "Images/tick.png"
                img_width_divisor: 2
                img_height_subtractor: 0
                label_text: "Yes"
                label_color: 0, 0, 0, .6
                label_font_name: "Fonts/neuropol_x.ttf"
                label_font_size_divisor: 1.6
                label_center_x_subtractor: 3
                label_center_y_addend: 1
                on_release: root.handle_exit(True)

                canvas.before:
                    RoundedRectangle:
                        size: self.size
                        pos: self.pos
                        radius: [self.height / 2]
                        texture: Gradient.horizontal(get_color_from_hex("5C8B78"), get_color_from_hex("5DE4A3"))

            FancyButton:
                size: exit_btn.width * 0.9, exit_btn.height * 1.1
                center: exit_confirm_msg.center_x + (self.width * 0.8), exit_confirm_msg.center_y - (self.height * 2.5) if exit_btn.opacity == 1 else root.top + exit_content.height
                img_source: "Images/cross.png"
                img_width_divisor: 2
                img_height_subtractor: 0
                label_text: "No"
                label_color: 0, 0, 0, .6
                label_font_name: "Fonts/neuropol_x.ttf"
                label_font_size_divisor: 1.6
                label_center_x_subtractor: 3
                label_center_y_addend: 1
                on_release: root.handle_exit(False)

                canvas.before:
                    RoundedRectangle:
                        size: self.size
                        pos: self.pos
                        radius: [self.height / 2]
                        texture: Gradient.horizontal(get_color_from_hex("DC1C13"), get_color_from_hex("F07470"))

    FloatLayout:
        id: options_content
        opacity: 0

        Widget:
            Label:
                id: volume_label
                text: "VOLUME"
                size: self.texture_size
                center: options_btn.center_x, aerodactyl.center_y + (self.height * 2) if options_btn.opacity == 1 else root.top + options_content.height
                color: 1, 1, 1
                font_name: "Fonts/neuropol_x.ttf"
                font_size: options_btn.height / 1.3

            Label:
                id: music_label
                text: "Music"
                size: self.texture_size
                center: exit_btn.right - (self.width / 2), volume_label.center_y - options_btn.height - (self.height / 2) if options_btn.opacity == 1 else root.top + options_content.height
                color: 170/255, 219/255, 242/255
                font_name: "Fonts/neuropol_x.ttf"
                font_size: options_btn.height * 0.6

            Slider:
                id: music_slider
                range: 0, 1
                value: 1
                step: 0.01
                width: options_btn.width
                center: music_label.center_x, volume_label.center_y - (options_btn.height * 2) - music_label.height if options_btn.opacity == 1 else root.top + options_content.height
                cursor_size: sp(25), sp(25)
                cursor_image: "Images/volume.png" if self.value > 0 else "Images/silent.png"
                background_width: sp(20)
                sensitivity: "handle"
                value_track: True
                value_track_width: sp(1.5)
                value_track_color: 136/255, 219/255, 127/255
                on_value: root.set_volume("music", self.value)

            Label:
                id: sfx_label
                text: "Sound Effects"
                size: self.texture_size
                center: options_btn.right + (music_label.width / 2), volume_label.center_y - options_btn.height - (self.height / 2) if options_btn.opacity == 1 else root.top + options_content.height
                color: 170/255, 219/255, 242/255
                font_name: "Fonts/neuropol_x.ttf"
                font_size: options_btn.height * 0.6

            Slider:
                id: sfx_slider
                range: 0, 1
                value: 1
                step: 0.01
                width: options_btn.width
                center: sfx_label.center_x, volume_label.center_y - (options_btn.height * 2) - sfx_label.height if options_btn.opacity == 1 else root.top + options_content.height
                cursor_size: sp(25), sp(25)
                cursor_image: "Images/volume.png" if self.value > 0 else "Images/silent.png"
                background_width: sp(20)
                sensitivity: "handle"
                value_track: True
                value_track_width: sp(1.5)
                value_track_color: 136/255, 219/255, 127/255
                on_value: root.set_volume("sfx", self.value)

            Label:
                id: memes_label
                text: "MEME CLIPS"
                size: self.texture_size
                center: options_btn.center_x, sfx_slider.center_y - (self.height * 2.5) if options_btn.opacity == 1 else root.top + options_content.height
                color: 1, 1, 1
                font_name: "Fonts/neuropol_x.ttf"
                font_size: options_btn.height / 1.3

            Label:
                id: show_memes_label
                text: "Show Memes"
                size: self.texture_size
                center: music_label.center_x, memes_label.center_y - options_btn.height - (self.height / 2) if options_btn.opacity == 1 else root.top + options_content.height
                color: 170/255, 219/255, 242/255
                font_name: "Fonts/neuropol_x.ttf"
                font_size: options_btn.height * 0.6
                opacity: 1 if options_btn.opacity == 1 else 0

            FancySpinner:
                id: show_memes
                text: "Yes"
                color: 0, 0, 0, 0
                size: exit_btn.width * 0.8, exit_btn.height
                center: show_memes_label.center_x, show_memes_label.center_y - (self.height * 1.5) if options_btn.opacity == 1 else root.top + options_content.height
                sync_height: True
                values: "Yes", "No"
                option_cls: "FancySpinnerOption"
                label_text: "Yes" if self.text == "Yes" else "No"
                label_color: 0, 0, 0, .6

                canvas.before:
                    RoundedRectangle:
                        size: self.size
                        pos: self.pos
                        radius: [self.height / 2]
                        texture: Gradient.horizontal(get_color_from_hex("32BEA6"), get_color_from_hex("67EBD4")) if self.text == "Yes" else Gradient.horizontal(get_color_from_hex("DC1C13"), get_color_from_hex("F07470"))

            Label:
                id: memes_lang_label
                text: "Language"
                size: self.texture_size
                center: sfx_label.center_x, memes_label.center_y - options_btn.height - (self.height / 2)  if options_btn.opacity == 1 else root.top + options_content.height
                color: 170/255, 219/255, 242/255
                font_name: "Fonts/neuropol_x.ttf"
                font_size: options_btn.height * 0.6

            FancySpinner:
                text: "English"
                color: 0, 0, 0, 0
                size: exit_btn.width * 1.1, exit_btn.height
                center: memes_lang_label.center_x, memes_lang_label.center_y - (self.height * 1.5) if options_btn.opacity == 1 else root.top + options_content.height
                opacity: 0.6 if self.disabled else 1
                sync_height: True
                values: "English", "Hindi", "Both"
                option_cls: "FancySpinnerOption"
                disabled: True if options_btn.opacity != 1 or show_memes.text == "No" else False
                label_text: "Both" if self.text == "Both" else "Hindi" if self.text == "Hindi" else "English"
                label_color: 0, 0, 0, .6

                canvas.before:
                    RoundedRectangle:
                        size: self.size
                        pos: self.pos
                        radius: [self.height / 2]
                        texture: Gradient.horizontal(get_color_from_hex("32BEA6"), get_color_from_hex("67EBD4"))

            FancyButton:
                size: exit_btn.width, exit_btn.height * 1.1
                center: options_btn.center_x, self.height * 2 if options_btn.opacity == 1 else root.top + options_content.height
                img_source: "Images/logout.png"
                img_width_divisor: 2
                img_height_subtractor: 0
                label_text: "Logout"
                label_color: 0, 0, 0, .6
                label_font_name: "Fonts/neuropol_x.ttf"
                label_font_size_divisor: 2
                label_center_x_subtractor: 3
                disabled: True if login_btn.label_text == "Login" else False
                opacity: 0 if self.disabled else 1
                on_release: root.confirm_logout()

                canvas.before:
                    RoundedRectangle:
                        size: self.size
                        pos: self.pos
                        radius: [self.height / 2]
                        texture: Gradient.horizontal(get_color_from_hex("FB8890"))

            Label:
                id: email_addr
                size: self.texture_size
                pos: exit_btn.x, self.height
                color: 1, 1, 1, 0.7
                font_name: "Fonts/neuropol_x.ttf"
                font_size: options_btn.height * 0.5
